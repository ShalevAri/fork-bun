name: Generate Linux SFX Archives
concurrency: sfx-linux

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., "bun-v1.0.2", "canary")'
        required: true
        default: "canary"
      upload-to-release:
        description: "Upload SFX files to the release?"
        type: boolean
        default: false

env:
  BUN_VERSION: ${{ github.event.inputs.tag || github.event.release.tag_name || 'canary' }}

jobs:
  create-linux-sfx:
    name: Create Linux Self-Extracting Archives
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'oven-sh' }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - arch: x64
            zip_name: bun-linux-x64
            display: x64
          - arch: x64
            zip_name: bun-linux-x64-baseline
            display: x64-baseline
            baseline: true
          - arch: aarch64
            zip_name: bun-linux-aarch64
            display: aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          echo "Creating working directory..."
          mkdir -p sfx-build
          cd sfx-build

      - name: Download Bun Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd sfx-build

          # Download the zip file from GitHub releases
          echo "Downloading ${{ matrix.zip_name }}.zip..."

          if [[ "${{ env.BUN_VERSION }}" == "canary" ]]; then
            DOWNLOAD_URL="https://github.com/oven-sh/bun/releases/download/canary/${{ matrix.zip_name }}.zip"
          else
            DOWNLOAD_URL="https://github.com/oven-sh/bun/releases/download/${{ env.BUN_VERSION }}/${{ matrix.zip_name }}.zip"
          fi

          curl -L -o "${{ matrix.zip_name }}.zip" "$DOWNLOAD_URL"

          # Extract the zip file using unzip (available on GitHub runners)
          unzip -q "${{ matrix.zip_name }}.zip"

          # Find the bun executable
          BUN_EXEC=$(find . -name "bun" -type f | head -n 1)
          if [[ -z "$BUN_EXEC" ]]; then
            echo "Error: Could not find bun executable in the archive"
            exit 1
          fi

          # Move it to a known location
          mv "$BUN_EXEC" "./bun"
          chmod +x ./bun

          # Clean up
          rm -rf bun-linux-*/ ${{ matrix.zip_name }}.zip

      - name: Create SFX Script
        run: |
          cd sfx-build

          # Create the self-extracting script
          cat > extract-header.sh << 'SCRIPT_EOF'
          #!/bin/sh
          # Bun Self-Extracting Archive for Linux
          # This is a self-extracting archive. Run it to install Bun.
          # No external dependencies required (no unzip needed!)

          set -e

          # Default installation directory
          DEFAULT_INSTALL_DIR="$HOME/.bun/bin"
          INSTALL_DIR="${BUN_INSTALL_DIR:-$DEFAULT_INSTALL_DIR}"

          # ANSI color codes (only if terminal supports it)
          if [ -t 1 ] && [ -n "${TERM-}" ] && [ "${TERM-}" != "dumb" ]; then
              RED='\033[0;31m'
              GREEN='\033[0;32m'
              YELLOW='\033[1;33m'
              NC='\033[0m'
          else
              RED=''
              GREEN=''
              YELLOW=''
              NC=''
          fi

          error() {
              printf "${RED}error: %s${NC}\n" "$1" >&2
              exit 1
          }

          info() {
              printf "${GREEN}%s${NC}\n" "$1"
          }

          warn() {
              printf "${YELLOW}warning: %s${NC}\n" "$1"
          }

          # Check if running on Linux
          if [ "$(uname -s)" != "Linux" ]; then
              error "This installer is for Linux only. Please download the correct version for your platform."
          fi

          # Check architecture
          ARCH="$(uname -m)"
          EXPECTED_ARCH="ARCH_PLACEHOLDER"
          EXPECTED_DISPLAY="DISPLAY_PLACEHOLDER"

          case "$ARCH" in
              x86_64)
                  ARCH_NORM="x64"
                  ;;
              aarch64|arm64)
                  ARCH_NORM="aarch64"
                  ;;
              *)
                  ARCH_NORM="$ARCH"
                  ;;
          esac

          # Check if architecture matches (allow x64 baseline on x64)
          ARCH_MISMATCH=0
          case "$EXPECTED_ARCH" in
              x64)
                  if [ "$ARCH_NORM" != "x64" ]; then
                      ARCH_MISMATCH=1
                  fi
                  ;;
              aarch64)
                  if [ "$ARCH_NORM" != "aarch64" ]; then
                      ARCH_MISMATCH=1
                  fi
                  ;;
          esac

          if [ "$ARCH_MISMATCH" = "1" ]; then
              warn "This installer is for $EXPECTED_DISPLAY but you're running on $ARCH"
              if [ -t 0 ]; then
                  printf "Continue anyway? [y/N] "
                  read -r REPLY
                  case "$REPLY" in
                      [Yy]*)
                          ;;
                      *)
                          exit 1
                          ;;
                  esac
              else
                  error "Architecture mismatch and no TTY to confirm"
              fi
          fi

          # Create installation directory
          mkdir -p "$INSTALL_DIR" || error "Failed to create installation directory: $INSTALL_DIR"

          # Find where the payload starts
          ARCHIVE_MARKER="__ARCHIVE_BELOW__"
          ARCHIVE_LINE=$(awk "/$ARCHIVE_MARKER/ { print NR + 1; exit }" "$0")

          if [ -z "$ARCHIVE_LINE" ]; then
              error "Could not find archive marker"
          fi

          # Extract the payload
          info "Extracting Bun to $INSTALL_DIR..."

          # Use tail to skip the script part, then decode and extract
          # We use base64 to ensure binary safety across all systems
          if ! tail -n +"$ARCHIVE_LINE" "$0" | base64 -d | tar -xzf - -C "$INSTALL_DIR" 2>/dev/null; then
              error "Failed to extract Bun. The archive may be corrupted."
          fi

          # Make it executable
          chmod +x "$INSTALL_DIR/bun" || error "Failed to make bun executable"

          # Verify installation
          if [ -x "$INSTALL_DIR/bun" ]; then
              BUN_VERSION=$("$INSTALL_DIR/bun" --version 2>/dev/null || echo "unknown")
              info "✓ Bun $BUN_VERSION has been installed to $INSTALL_DIR/bun"
          else
              error "Installation verification failed"
          fi

          # Check if bun is in PATH
          if ! echo "$PATH" | grep -q "$INSTALL_DIR"; then
              info ""
              info "To get started, add Bun to your PATH:"
              info "  export PATH=\"\$PATH:$INSTALL_DIR\""
              info ""
              info "To make this permanent, add it to your shell configuration file:"
              case "${SHELL##*/}" in
                  bash)
                      info "  echo 'export PATH=\"\$PATH:$INSTALL_DIR\"' >> ~/.bashrc"
                      ;;
                  zsh)
                      info "  echo 'export PATH=\"\$PATH:$INSTALL_DIR\"' >> ~/.zshrc"
                      ;;
                  fish)
                      info "  echo 'set -gx PATH \$PATH $INSTALL_DIR' >> ~/.config/fish/config.fish"
                      ;;
                  *)
                      info "  echo 'export PATH=\"\$PATH:$INSTALL_DIR\"' >> ~/.profile"
                      ;;
              esac
          fi

          exit 0
          # DO NOT REMOVE THE FOLLOWING LINE
          __ARCHIVE_BELOW__
          SCRIPT_EOF

          # Replace placeholders
          sed -i "s/ARCH_PLACEHOLDER/${{ matrix.arch }}/g" extract-header.sh
          sed -i "s/DISPLAY_PLACEHOLDER/${{ matrix.display }}/g" extract-header.sh

      - name: Create Self-Extracting Archive
        run: |
          cd sfx-build

          # Create a tar.gz of the bun executable
          tar -czf bun.tar.gz bun

          # Encode it as base64 (for binary safety)
          base64 < bun.tar.gz > bun.tar.gz.b64

          # Combine header and payload
          cat extract-header.sh bun.tar.gz.b64 > "${{ matrix.zip_name }}-sfx.sh"

          # Make it executable
          chmod +x "${{ matrix.zip_name }}-sfx.sh"

          # Test the SFX
          echo "Testing self-extraction..."
          TEST_DIR="$(mktemp -d)"
          BUN_INSTALL_DIR="$TEST_DIR" ./${{ matrix.zip_name }}-sfx.sh

          if [ -x "$TEST_DIR/bun" ]; then
            echo "✓ Self-extraction test passed"
            "$TEST_DIR/bun" --version
            rm -rf "$TEST_DIR"
          else
            echo "✗ Self-extraction test failed"
            exit 1
          fi

      - name: Create Quick Install Script
        run: |
          cd sfx-build

          # Also create a simple download-and-run script
          cat > "${{ matrix.zip_name }}-install.sh" << 'INSTALLER_EOF'
          #!/bin/sh
          # Quick installer script for Bun on Linux

          set -e

          VERSION="VERSION_PLACEHOLDER"
          ARCHIVE_NAME="ARCHIVE_PLACEHOLDER"

          echo "Downloading Bun $VERSION for Linux..."

          if [ "$VERSION" = "canary" ]; then
              URL="https://github.com/oven-sh/bun/releases/download/canary/${ARCHIVE_NAME}-sfx.sh"
          else
              URL="https://github.com/oven-sh/bun/releases/download/$VERSION/${ARCHIVE_NAME}-sfx.sh"
          fi

          if command -v curl >/dev/null 2>&1; then
              curl -fsSL "$URL" | sh
          elif command -v wget >/dev/null 2>&1; then
              wget -qO- "$URL" | sh
          else
              echo "Error: Neither curl nor wget found. Please install one of them."
              exit 1
          fi
          INSTALLER_EOF

          # Replace placeholders
          sed -i "s/VERSION_PLACEHOLDER/${{ env.BUN_VERSION }}/g" "${{ matrix.zip_name }}-install.sh"
          sed -i "s/ARCHIVE_PLACEHOLDER/${{ matrix.zip_name }}/g" "${{ matrix.zip_name }}-install.sh"

          chmod +x "${{ matrix.zip_name }}-install.sh"

      - name: Generate Checksums
        run: |
          cd sfx-build

          # Generate SHA256 checksums
          sha256sum "${{ matrix.zip_name }}-sfx.sh" > "${{ matrix.zip_name }}-sfx.sh.sha256"
          sha256sum "${{ matrix.zip_name }}-install.sh" > "${{ matrix.zip_name }}-install.sh.sha256"

          echo "Generated files:"
          ls -la *.sh *.sha256

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.zip_name }}-sfx
          path: |
            sfx-build/${{ matrix.zip_name }}-sfx.sh
            sfx-build/${{ matrix.zip_name }}-sfx.sh.sha256
            sfx-build/${{ matrix.zip_name }}-install.sh
            sfx-build/${{ matrix.zip_name }}-install.sh.sha256

      - name: Upload to Release
        if: ${{ (github.event_name == 'release' || github.event.inputs.upload-to-release == 'true') && env.BUN_VERSION != 'canary' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd sfx-build

          # Upload the SFX and installer scripts to the release
          gh release upload "${{ env.BUN_VERSION }}" \
            "${{ matrix.zip_name }}-sfx.sh" \
            "${{ matrix.zip_name }}-sfx.sh.sha256" \
            "${{ matrix.zip_name }}-install.sh" \
            "${{ matrix.zip_name }}-install.sh.sha256" \
            --clobber \
            --repo "${{ github.repository }}"

  create-universal-linux-installer:
    name: Create Universal Linux Installer
    runs-on: ubuntu-latest
    needs: create-linux-sfx
    if: ${{ github.repository_owner == 'oven-sh' }}
    permissions:
      contents: write
    steps:
      - name: Download SFX Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bun-linux-*-sfx
          merge-multiple: true
          path: sfx-files

      - name: Create Universal Installer
        run: |
          cd sfx-files

          # Create a universal installer that detects architecture
          cat > bun-linux-install.sh << 'UNIVERSAL_EOF'
          #!/bin/sh
          # Universal Bun installer for Linux (detects architecture automatically)

          set -e

          VERSION="VERSION_PLACEHOLDER"

          # Detect architecture
          ARCH="$(uname -m)"
          case "$ARCH" in
              x86_64)
                  # Check CPU features for baseline support
                  if [ -f /proc/cpuinfo ]; then
                      # Check for AVX2 support (non-baseline requirement)
                      if grep -q "avx2" /proc/cpuinfo 2>/dev/null; then
                          ARCHIVE_NAME="bun-linux-x64"
                          echo "Detected: x64 (with AVX2 support)"
                      else
                          ARCHIVE_NAME="bun-linux-x64-baseline"
                          echo "Detected: x64 (baseline - no AVX2)"
                      fi
                  else
                      # Default to baseline if we can't detect
                      ARCHIVE_NAME="bun-linux-x64-baseline"
                      echo "Detected: x64 (defaulting to baseline)"
                  fi
                  ;;
              aarch64|arm64)
                  ARCHIVE_NAME="bun-linux-aarch64"
                  echo "Detected: ARM64/AArch64"
                  ;;
              *)
                  echo "Error: Unsupported architecture: $ARCH"
                  echo "Bun supports x64 and aarch64 on Linux"
                  exit 1
                  ;;
          esac

          echo "Downloading Bun $VERSION for Linux..."

          if [ "$VERSION" = "canary" ]; then
              URL="https://github.com/oven-sh/bun/releases/download/canary/${ARCHIVE_NAME}-sfx.sh"
          else
              URL="https://github.com/oven-sh/bun/releases/download/$VERSION/${ARCHIVE_NAME}-sfx.sh"
          fi

          if command -v curl >/dev/null 2>&1; then
              curl -fsSL "$URL" | sh
          elif command -v wget >/dev/null 2>&1; then
              wget -qO- "$URL" | sh
          else
              echo "Error: Neither curl nor wget found. Please install one of them."
              exit 1
          fi
          UNIVERSAL_EOF

          # Replace version placeholder
          sed -i "s/VERSION_PLACEHOLDER/${{ env.BUN_VERSION }}/g" bun-linux-install.sh

          chmod +x bun-linux-install.sh

          # Generate checksum
          sha256sum bun-linux-install.sh > bun-linux-install.sh.sha256

      - name: Upload Universal Installer
        uses: actions/upload-artifact@v4
        with:
          name: bun-linux-universal-sfx
          path: |
            sfx-files/bun-linux-install.sh
            sfx-files/bun-linux-install.sh.sha256

      - name: Upload to Release
        if: ${{ (github.event_name == 'release' || github.event.inputs.upload-to-release == 'true') && env.BUN_VERSION != 'canary' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd sfx-files

          gh release upload "${{ env.BUN_VERSION }}" \
            "bun-linux-install.sh" \
            "bun-linux-install.sh.sha256" \
            --clobber \
            --repo "${{ github.repository }}"
