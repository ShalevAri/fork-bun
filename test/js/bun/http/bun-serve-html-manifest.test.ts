import { describe, expect, test, beforeAll, afterAll } from "bun:test";
import { join } from "path";
import { tempDirWithFiles } from "harness";
import type { Server } from "bun";

describe("serve html manifest", () => {
  test.only("basic manifest object with index and files", async () => {
    const dir = tempDirWithFiles("html-manifest-basic", {
      "index.html": `<!DOCTYPE html>
<html>
<head>
  <title>Manifest Test</title>
</head>
<body>
  <h1>Hello from Manifest</h1>
</body>
</html>`,
      "about.html": `<!DOCTYPE html>
<html>
<head>
  <title>About Page</title>
</head>
<body>
  <h1>About Us</h1>
</body>
</html>`,
      "styles.css": `.container { color: blue; }`,
      "script.js": `console.log("Hello from script");`,
    });

    // Create a manifest object that mimics what would be generated by the bundler
    const manifest = {
      index: join(dir, "index.html"),
      files: [{ path: join(dir, "about.html") }, { path: join(dir, "styles.css") }, { path: join(dir, "script.js") }],
    };

    using server = Bun.serve({
      port: 0,
      routes: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    // Test index route
    const indexResponse = await fetch(server.url);
    expect(indexResponse.status).toBe(200);
    expect(indexResponse.headers.get("content-type")).toBe("text/html;charset=utf-8");
    const indexHtml = await indexResponse.text();
    expect(indexHtml).toContain("<h1>Hello from Manifest</h1>");

    // Test file routes
    const aboutResponse = await fetch(`${server.url}about.html`);
    expect(aboutResponse.status).toBe(200);
    expect(aboutResponse.headers.get("content-type")).toBe("text/html;charset=utf-8");
    const aboutHtml = await aboutResponse.text();
    expect(aboutHtml).toContain("<h1>About Us</h1>");

    const cssResponse = await fetch(`${server.url}styles.css`);
    expect(cssResponse.status).toBe(200);
    expect(cssResponse.headers.get("content-type")).toBe("text/css;charset=utf-8");
    const css = await cssResponse.text();
    expect(css).toContain(".container { color: blue; }");

    const jsResponse = await fetch(`${server.url}script.js`);
    expect(jsResponse.status).toBe(200);
    expect(jsResponse.headers.get("content-type")).toBe("text/javascript;charset=utf-8");
    const js = await jsResponse.text();
    expect(js).toContain('console.log("Hello from script");');
  });

  test("manifest with custom headers", async () => {
    const dir = tempDirWithFiles("html-manifest-headers", {
      "index.html": `<!DOCTYPE html><html><body>Index</body></html>`,
      "cached.js": `console.log("cached");`,
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [
        {
          path: join(dir, "cached.js"),
          headers: {
            "Cache-Control": "public, max-age=3600",
            "X-Custom-Header": "custom-value",
          },
        },
      ],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    const jsResponse = await fetch(`${server.url}cached.js`);
    expect(jsResponse.status).toBe(200);
    expect(jsResponse.headers.get("cache-control")).toBe("public, max-age=3600");
    expect(jsResponse.headers.get("x-custom-header")).toBe("custom-value");
  });

  test("manifest with nested paths", async () => {
    const dir = tempDirWithFiles("html-manifest-nested", {
      "index.html": `<!DOCTYPE html><html><body>Root</body></html>`,
      "assets/styles.css": `.nested { color: red; }`,
      "assets/images/logo.png": Buffer.from("fake png data"),
      "pages/about.html": `<!DOCTYPE html><html><body>About</body></html>`,
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [
        { path: join(dir, "assets/styles.css") },
        { path: join(dir, "assets/images/logo.png") },
        { path: join(dir, "pages/about.html") },
      ],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    // Test nested paths are served correctly
    const cssResponse = await fetch(`${server.url}assets/styles.css`);
    expect(cssResponse.status).toBe(200);
    const css = await cssResponse.text();
    expect(css).toContain(".nested { color: red; }");

    const pngResponse = await fetch(`${server.url}assets/images/logo.png`);
    expect(pngResponse.status).toBe(200);
    expect(pngResponse.headers.get("content-type")).toBe("image/png");

    const aboutResponse = await fetch(`${server.url}pages/about.html`);
    expect(aboutResponse.status).toBe(200);
    const aboutHtml = await aboutResponse.text();
    expect(aboutHtml).toContain("About");
  });

  test("manifest with multiple routes", async () => {
    const dir = tempDirWithFiles("html-manifest-multiple", {
      "home/index.html": `<!DOCTYPE html><html><body>Home</body></html>`,
      "home/home.js": `console.log("home");`,
      "admin/index.html": `<!DOCTYPE html><html><body>Admin</body></html>`,
      "admin/admin.js": `console.log("admin");`,
    });

    const homeManifest = {
      index: join(dir, "home/index.html"),
      files: [{ path: join(dir, "home/home.js") }],
    };

    const adminManifest = {
      index: join(dir, "admin/index.html"),
      files: [{ path: join(dir, "admin/admin.js") }],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": homeManifest,
        "/admin": adminManifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    // Test home route
    const homeResponse = await fetch(server.url);
    expect(homeResponse.status).toBe(200);
    const homeHtml = await homeResponse.text();
    expect(homeHtml).toContain("Home");

    const homeJsResponse = await fetch(`${server.url}home/home.js`);
    expect(homeJsResponse.status).toBe(200);
    const homeJs = await homeJsResponse.text();
    expect(homeJs).toContain('console.log("home");');

    // Test admin route
    const adminResponse = await fetch(`${server.url}admin`);
    expect(adminResponse.status).toBe(200);
    const adminHtml = await adminResponse.text();
    expect(adminHtml).toContain("Admin");

    const adminJsResponse = await fetch(`${server.url}admin/admin.js`);
    expect(adminJsResponse.status).toBe(200);
    const adminJs = await adminJsResponse.text();
    expect(adminJs).toContain('console.log("admin");');
  });

  test("manifest with large files", async () => {
    const largeContent = "x".repeat(1024 * 1024); // 1MB
    const dir = tempDirWithFiles("html-manifest-large", {
      "index.html": `<!DOCTYPE html><html><body>Index</body></html>`,
      "large.txt": largeContent,
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [{ path: join(dir, "large.txt") }],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    const response = await fetch(`${server.url}large.txt`);
    expect(response.status).toBe(200);
    const text = await response.text();
    expect(text.length).toBe(1024 * 1024);
    expect(text).toBe(largeContent);
  });

  test("manifest with binary files", async () => {
    const binaryData = Buffer.from([0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10]); // JPEG header
    const dir = tempDirWithFiles("html-manifest-binary", {
      "index.html": `<!DOCTYPE html><html><body>Index</body></html>`,
      "image.jpg": binaryData,
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [{ path: join(dir, "image.jpg") }],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    const response = await fetch(`${server.url}image.jpg`);
    expect(response.status).toBe(200);
    expect(response.headers.get("content-type")).toBe("image/jpeg");
    const buffer = await response.arrayBuffer();
    expect(new Uint8Array(buffer)).toEqual(new Uint8Array(binaryData));
  });

  test("manifest handles HEAD requests", async () => {
    const dir = tempDirWithFiles("html-manifest-head", {
      "index.html": `<!DOCTYPE html><html><body>Index</body></html>`,
      "file.txt": "Hello World",
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [{ path: join(dir, "file.txt") }],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    // HEAD request for index
    const indexHead = await fetch(server.url, { method: "HEAD" });
    expect(indexHead.status).toBe(200);
    expect(indexHead.headers.get("content-type")).toBe("text/html;charset=utf-8");
    expect(await indexHead.text()).toBe("");

    // HEAD request for file
    const fileHead = await fetch(`${server.url}file.txt`, { method: "HEAD" });
    expect(fileHead.status).toBe(200);
    expect(fileHead.headers.get("content-type")).toBe("text/plain;charset=utf-8");
    expect(await fileHead.text()).toBe("");
  });

  test("manifest with empty files array", async () => {
    const dir = tempDirWithFiles("html-manifest-empty", {
      "index.html": `<!DOCTYPE html><html><body>Index Only</body></html>`,
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    // Index should work
    const indexResponse = await fetch(server.url);
    expect(indexResponse.status).toBe(200);
    const html = await indexResponse.text();
    expect(html).toContain("Index Only");

    // Other paths should return 404
    const notFound = await fetch(`${server.url}nonexistent.js`);
    expect(notFound.status).toBe(404);
  });

  test("manifest with wildcards and API routes", async () => {
    const dir = tempDirWithFiles("html-manifest-wildcard", {
      "index.html": `<!DOCTYPE html><html><body>App</body></html>`,
      "app.js": `console.log("app");`,
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [{ path: join(dir, "app.js") }],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/*": manifest,
        "/api/*": false,
      },
      fetch(req) {
        const url = new URL(req.url);
        if (url.pathname.startsWith("/api/")) {
          return Response.json({ api: true, path: url.pathname });
        }
        return new Response("Not found", { status: 404 });
      },
    });

    // Test HTML routes
    for (const path of ["/", "/about", "/contact"]) {
      const response = await fetch(`${server.url}${path}`);
      expect(response.status).toBe(200);
      const html = await response.text();
      expect(html).toContain("App");
    }

    // Test static file
    const jsResponse = await fetch(`${server.url}app.js`);
    expect(jsResponse.status).toBe(200);
    const js = await jsResponse.text();
    expect(js).toContain('console.log("app");');

    // Test API routes
    const apiResponse = await fetch(`${server.url}api/users`);
    expect(apiResponse.status).toBe(200);
    const json = await apiResponse.json();
    expect(json).toEqual({ api: true, path: "/api/users" });
  });

  test("manifest with development mode", async () => {
    const dir = tempDirWithFiles("html-manifest-dev", {
      "index.html": `<!DOCTYPE html><html><body>Dev Mode</body></html>`,
      "app.js": `console.log("development");`,
    });

    const manifest = {
      index: join(dir, "index.html"),
      files: [{ path: join(dir, "app.js") }],
    };

    for (const development of [true, false]) {
      using server = Bun.serve({
        port: 0,
        development,
        static: {
          "/": manifest,
        },
        fetch(req) {
          return new Response("Not found", { status: 404 });
        },
      });

      const response = await fetch(server.url);
      expect(response.status).toBe(200);
      const html = await response.text();
      expect(html).toContain("Dev Mode");
    }
  });

  test("manifest with relative paths converted to absolute", async () => {
    const dir = tempDirWithFiles("html-manifest-relative", {
      "public/index.html": `<!DOCTYPE html><html><body>Public</body></html>`,
      "public/assets/style.css": `body { margin: 0; }`,
    });

    // Test that relative paths are handled correctly
    const manifest = {
      index: join(dir, "public/index.html"),
      files: [{ path: join(dir, "public/assets/style.css") }],
    };

    using server = Bun.serve({
      port: 0,
      static: {
        "/": manifest,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    const cssResponse = await fetch(`${server.url}public/assets/style.css`);
    expect(cssResponse.status).toBe(200);
    const css = await cssResponse.text();
    expect(css).toContain("body { margin: 0; }");
  });

  test("manifest reload", async () => {
    const dir = tempDirWithFiles("html-manifest-reload", {
      "v1/index.html": `<!DOCTYPE html><html><body>Version 1</body></html>`,
      "v2/index.html": `<!DOCTYPE html><html><body>Version 2</body></html>`,
    });

    const manifest1 = {
      index: join(dir, "v1/index.html"),
      files: [],
    };

    const manifest2 = {
      index: join(dir, "v2/index.html"),
      files: [],
    };

    const server = Bun.serve({
      port: 0,
      static: {
        "/": manifest1,
      },
      fetch(req) {
        return new Response("Not found", { status: 404 });
      },
    });

    try {
      // Test initial version
      const response1 = await fetch(server.url);
      expect(response1.status).toBe(200);
      const html1 = await response1.text();
      expect(html1).toContain("Version 1");

      // Reload with new manifest
      server.reload({
        static: {
          "/": manifest2,
        },
        fetch(req) {
          return new Response("Not found", { status: 404 });
        },
      });

      // Test updated version
      const response2 = await fetch(server.url);
      expect(response2.status).toBe(200);
      const html2 = await response2.text();
      expect(html2).toContain("Version 2");
    } finally {
      server.stop(true);
    }
  });
});
