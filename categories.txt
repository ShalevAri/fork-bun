```js
doc = (top list)
doc2 = (electron list)
{

[...document.querySelectorAll(".test-link")].forEach(t => {
const name = t.lastChild.nodeValue.trim().slice(0, -3);

if(doc2.includes(name)) {
t.style.color = "red";
}else if(doc.includes(name)) {
t.style.color = "black";
}

})

}
```

# TODO CHECK:

parallel/test-tls-env-bad-extra-ca.js
parallel/test-tls-connect-allow-half-open-option.js
parallel/test-tls-client-reject-12.js
parallel/test-tls-ticket-12.js
parallel/test-tls-client-resume-12.js
parallel/test-tls-server-parent-constructor-options.js
parallel/test-tls-get-ca-certificates-system.js
parallel/test-tls-get-ca-certificates-default.js
parallel/test-tls-external-accessor.js
parallel/test-tls-cert-chains-in-ca.js
parallel/test-tls-get-ca-certificates-error.js
parallel/test-tls-get-ca-certificates-extra-empty.js
parallel/test-tls-basic-validations.js
parallel/test-tls-server-setkeycert.js
parallel/test-tls-error-servername.js
parallel/test-tls-enable-keylog-cli.js
parallel/test-tls-cert-chains-concat.js
parallel/test-tls-streamwrap-buffersize.js
parallel/test-tls-destroy-stream.js
parallel/test-tls-pause.js
parallel/test-tls-connect-memleak.js
parallel/test-tls-get-ca-certificates-bundled.js
parallel/test-tls-clientcertengine-invalid-arg-type.js
parallel/test-tls-timeout-server.js
parallel/test-tls-destroy-stream-12.js
parallel/test-tls-net-socket-keepalive-12.js
parallel/test-tls-socket-default-options.js
parallel/test-tls-get-ca-certificates-extra-subset.js
parallel/test-double-tls-client.js
parallel/test-tls-retain-handle-no-abort.js
parallel/test-tls-keylog-tlsv13.js
parallel/test-tls-client-resume.js
parallel/test-tls-no-sslv23.js
parallel/test-tls-connect-timeout-option.js
parallel/test-tls-client-allow-partial-trust-chain.js
parallel/test-tls-cli-min-max-conflict.js
parallel/test-tls-get-ca-certificates-system-without-flag.js
parallel/test-tls-get-ca-certificates-bundled-subset.js
parallel/test-tls-getcertificate-x509.js
parallel/test-tls-get-ca-certificates-extra.js
parallel/test-tls-env-extra-ca.js
parallel/test-tls-socket-destroy.js
parallel/test-tls-socket-close.js
parallel/test-tls-connect-given-socket.js
parallel/test-double-tls-server.js
parallel/test-tls-writewrap-leak.js
parallel/test-tls-exportkeyingmaterial.js
parallel/test-tls-env-extra-ca-with-options.js
parallel/test-tls-set-secure-context.js
parallel/test-tls-server-capture-rejection.js
parallel/test-tls-wrap-event-emmiter.js
parallel/test-tls-client-default-ciphers.js
parallel/test-tls-socket-constructor-alpn-options-parsing.js
sequential/test-tls-session-timeout.js

# Key

[ES] = skipped by electron
[RM] = removed

# Try First

missing socket.on('data') event when data received after socket.end():
- test-tls-net-socket-keepalive.js

getTLSPeerFinishedMessage not working right? and same for getFinished
- test-tls-finished.js

SNICallback not supported: (#17932, #14395, #6749, #4053) (kai)
- test-tls-starttls-server.js
- test-tls-socket-snicallback-without-server.js
- test-tls-snicallback-error.js
- test-tls-sni-option.js
- test-tls-sni-servername.js
- [ES] test-tls-empty-sni-context.js
- checkServerIdentity called with 'undefined' for 'cert', throws: test-tls-empty-sni-context.js

No cipher match: (look at electron? openssl.c)
- [ES] no cipher match: test-tls-multi-pfx, test-tls-psk-errors
- no cipher match: test-tls-connect-stream-writes.js
- [ES] errors with 'no cipher match' rather than 'key too small'. '@SECLEVEL=0' does not work: test-tls-reduced-SECLEVEL-in-cipher.js
- errors with 'no cipher match' rather than a DeprecationWarning for ip servername: test-tls-ip-servername-deprecation.js
connect() callback never called when invalid pfx provided: test-tls-invalid-pfx.js

SecureContext: impl in c++? wrap us socket context. we have InternalSecureContext. (kai)

Is ncrypt used in node tls, do we need to update it?

# More

- [ES] bun gets error ECONNREFUSED but node gets write EPROTO & allows process exit: test-tls-junk-server
- different cipher list, support --tls-cipher-list: test-tls-cipher-list
- after 'client wrote data', bufferSize was 0 when node has it '1': test-tls-buffersize
- node never trips `ret !== false` branch: test-tlsp-ause.js
- [ES] cluster stuff: test-tls-ticket-cluster
- [ES] ServerHandlers handshake() doesn't disconect for non-ECONNRESEET error? test-tls-hello-parser-failure.js
- takes 18s in bun but 300ms in node: test-gc-tls-external-memory.js
- [ES] overwrites duplex and emits custom connection event? test-tls-handshake-exception.js
- missing '_tlsError' event: test-tls-delayed-attach-error.js
- tls.setTicketKeys is 'Not implemented in Bun yet': test-tls-ticket-invalid-arg.js
- [ES] getCertificate() returns undefined: test-tls-pfx-authorizationerror.js
- [ES] test-tls-socket-failed-handshake-emits-error.js

SecureContext:
- missing addCACert: test-tls-addca

createSecurePair not implemented:
These tests are removed in new node versions: (createSecurePair is deprecated)
- [RM] test-tls-securepair-fiftharg.js
- [RM] test-tls-securepair-leak.js
- [RM] test-tls-legacy-deprecated.js

# Pass on mac

- [ES] test-tls-junk-closes-server
- test-tls-onread-static-buffer
- test-tls-lookup
- test-tls-wrap-econnreset-pipe

# Attempted

http.request errors because it passes port but no host and path as `localhost:${port}`. _http_client concatenates
that to `localhost:${port}localhost:${port}` which is an invalid url
- test-tls-over-http-tunnel.js
- the problem is that sending an http request with path `abcd` will do `GET abcd HTTP/1.1`, but
  fetch `url.com/abcd` is `GET /abcd HTTP/1.1`. skipping the slash is invalid anyway and node's http server doesn't
  accept it. but net does.
- http_client in bun is implemented with fetch which doesn't let you send a malformed http request
- this might be unintentional? unclear

[ES] test-tls-disable-renegotiation.js:
- missing ERR_INVALID_ARG_TYPE for client.renegotiate()
- OpenSSL function should not have been called via OPENSSL_internal SSL routines
- The error is emitted at: <https://github.com/google/boringssl/blob/035e720641f385e82c72b7b0a9e1d89e58cb5ed5/ssl/ssl_lib.cc#L1629>
- marked as 'caller-initiated renegotiation is not supported'. you can't renegotiate unless a renegotiation is already pending.

test-tls-secure-session.js
- client.on("session") never called?
- probably because it sets secureProtocol: 'TLSv1_2_method'
- we probably don't support setting secureProtocol
- we don't emit a session event at all ever except in http2. node emits a session at the end of onConnectSecure and in onnewesssionclient
- search terms: 'emit('session)'

desc

test-tls-secure-session is failing for two reasions:
1. Bun doesn't implement secureProtocol, so it does not use tls v1.2
2. Bun does not emit a session event.

Tasks. Complete tasks one at a time. Once a task is completed and tested, check off the task and commit your code.
- [ ] Create a test file called `repro.js` that tests if the session event is emitted. Make sure it passes using `node repro.js` and fails using `bun bd repro.js`
- [ ] Search node's source code (in ../node) and find when it emits a sesssion event, then update Bun's code to emit a session event the same way. Test if this worked using `bun bd repro.js`
- [ ] Implement secureProtocol. Test if this worked using `bun bd test/js/node/test/parallel/test-tls-secure-session.js`. It will time out if it fails.

test-tls-js-stream.js:
- connection closes earlier than expected?

# Done

- 3 failures: test-tls-check-server-identity

# Skipped by electron

these tests are disabled by electron: (https://github.com/electron/electron/blob/main/script/node-disabled-tests.json)
  "parallel/test-tls-alpn-server-client",
  "parallel/test-tls-cli-min-version-1.0",
  "parallel/test-tls-cli-max-version-1.2",
  "parallel/test-tls-cli-max-version-1.3",
  "parallel/test-tls-cli-min-version-1.1",
  "parallel/test-tls-cli-min-version-1.2",
  "parallel/test-tls-cli-min-version-1.3",
  "parallel/test-tls-client-auth",
  "parallel/test-tls-client-getephemeralkeyinfo",
  "parallel/test-tls-client-mindhsize",
  "parallel/test-tls-client-reject",
  "parallel/test-tls-client-renegotiation-13",
  "parallel/test-tls-cnnic-whitelist",
  "parallel/test-tls-disable-renegotiation",
  "parallel/test-tls-empty-sni-context",
  "parallel/test-tls-error-stack",
  "parallel/test-tls-finished",
  "parallel/test-tls-generic-stream",
  "parallel/test-tls-getcipher",
  "parallel/test-tls-getprotocol",
  "parallel/test-tls-handshake-error",
  "parallel/test-tls-handshake-exception",
  "parallel/test-tls-hello-parser-failure",
  "parallel/test-tls-honorcipherorder",
  "parallel/test-tls-junk-closes-server",
  "parallel/test-tls-junk-server",
  "parallel/test-tls-key-mismatch",
  "parallel/test-tls-max-send-fragment",
  "parallel/test-tls-min-max-version",
  "parallel/test-tls-multi-key",
  "parallel/test-tls-multi-pfx",
  "parallel/test-tls-no-cert-required",
  "parallel/test-tls-options-boolean-check",
  "parallel/test-tls-passphrase",
  "parallel/test-tls-peer-certificate",
  "parallel/test-tls-pfx-authorizationerror",
  "parallel/test-tls-psk-circuit",
  "parallel/test-tls-reduced-SECLEVEL-in-cipher",
  "parallel/test-tls-root-certificates",
  "parallel/test-tls-server-failed-handshake-emits-clienterror",
  "parallel/test-tls-set-ciphers",
  "parallel/test-tls-set-ciphers-error",
  "parallel/test-tls-set-sigalgs",
  "parallel/test-tls-socket-allow-half-open-option",
  "parallel/test-tls-socket-failed-handshake-emits-error",
  "parallel/test-tls-ticket",
  "parallel/test-tls-ticket-cluster",