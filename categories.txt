```js
doc = (top list)
doc2 = (electron list)
{

[...document.querySelectorAll(".test-link")].forEach(t => {
const name = t.lastChild.nodeValue.trim().slice(0, -3);

if(doc2.includes(name)) {
t.style.color = "red";
}else if(doc.includes(name)) {
t.style.color = "black";
}

})

}
```

# TODO CHECK:

# max version env vars, not investigated.

parallel/test-tls-client-reject-12.js
parallel/test-tls-ticket-12.js
parallel/test-tls-client-resume-12.js
parallel/test-tls-destroy-stream-12.js
parallel/test-tls-net-socket-keepalive-12.js
parallel/test-tls-keylog-tlsv13.js
parallel/test-tls-cli-min-max-conflict.js

# trivial

parallel/test-tls-external-accessor.js
- we don't support `_external`, but we pass the spirit of the test. trivial 'fix'
parallel/test-tls-destroy-stream.js
parallel/test-tls-socket-close.js
parallel/test-double-tls-client.js (this one maybe not as easy, but it is somewhat related)
parallel/test-tls-server-capture-rejection.js (maybe related? async createServer callback does not work with events.captureRejections)
- the test calls `.emit("connection")` on the tlsServer. In node, this calls the connection
  handler but in bun it does not. Switch tls to use emit("connection") rather than
  calling the connection listener directly, and add .on('connection') in the constructor
  like node does.
  ```diff
  if (typeof options === "function") {
    connectionListener = options;
    options = {};
  +this.on("connection", connectionListener);
  } else if (options == null || typeof options === "object") {
    options = { ...options };
  +this.on("connection", connectionListener);
  } else {
    throw $ERR_INVALID_ARG_TYPE("options", ["Object", "Function"], options);
  }

  -  if (typeof connectionListener === "function") {
  -    this.pauseOnConnect = pauseOnConnect;
  -    if (!isTLS) {
  -      connectionListener.$call(self, _socket);
  -    }
  -  }

  also check what to do here

    const connectionListener = server[bunSocketServerOptions]?.connectionListener;
    if (typeof connectionListener === "function") {
      connectionListener.$call(server, self);
    }
    server.emit("secureConnection", self);
  ```
parallel/test-tls-wrap-event-emmiter.js
- missing error for passing plain eventEmitter to TlsSocket constructor

# probably easy

parallel/test-tls-exportkeyingmaterial.js
- exportKeyingMaterial emits as uncaughtException rather than thrown error
parallel/test-tls-cert-chains-in-ca.js
parallel/test-tls-env-extra-ca.js
- checkServerIdentity callback is not implemented
parallel/test-tls-basic-validations.js
- 12 mismatched errors
parallel/test-tls-error-servername.js
- 2 mismatched errors
parallel/test-tls-client-allow-partial-trust-chain.js
- support allowPartialTrustChain
parallel/test-tls-env-bad-extra-ca.js
- emit a warning when the value in NODE_EXTRA_CA_CERTS is ignored because it fails to load
- this is a little bit hard to do because currently we handle that in us_internal_init_root_certs with getenv,
  but we can't emit a warning from there. we would have to have it call out to bun code to emit the warning

# categorize

parallel/test-tls-connect-allow-half-open-option.js
- with allowHalfOpen, if the server ends its socket, it should still be able to receive a message
parallel/test-tls-server-parent-constructor-options.js
- with pauseOnConnect, the client is never connecting
parallel/test-tls-get-ca-certificates-system.js
parallel/test-tls-get-ca-certificates-default.js
parallel/test-tls-get-ca-certificates-error.js
parallel/test-tls-get-ca-certificates-extra-empty.js
parallel/test-tls-get-ca-certificates-bundled.js
parallel/test-tls-get-ca-certificates-extra-subset.js
parallel/test-tls-get-ca-certificates-system-without-flag.js
parallel/test-tls-get-ca-certificates-bundled-subset.js
parallel/test-tls-get-ca-certificates-extra.js
- tls.getCACertificates is not implemented
parallel/test-tls-server-setkeycert.js
- some kind of problem with getPeerX509Certificate?
parallel/test-tls-enable-keylog-cli.js
- support --tls-keylog cli flag
parallel/test-tls-cert-chains-concat.js
- issuerCertificate is not defined?
parallel/test-tls-streamwrap-buffersize.js
- bufferSize is wrong. also it is deprecated.
parallel/test-tls-clientcertengine-invalid-arg-type.js
parallel/test-tls-socket-default-options.js
parallel/test-tls-set-secure-context.js
- createSecureContext (kai)
parallel/test-tls-timeout-server.js
parallel/test-tls-socket-destroy.js
- handshakeTimeout is not implemented
parallel/test-tls-retain-handle-no-abort.js
- unable to verify the first certificate? UNABLE_TO_VERIFY_LEAF_SIGNATURE
parallel/test-tls-client-resume.js
- done https://github.com/oven-sh/bun/pull/20197
parallel/test-tls-connect-timeout-option.js
- support tls connect timeout option
parallel/test-tls-getcertificate-x509.js
- error: error:0900006e:PEM routines:OPENSSL_internal:NO_START_LINE
parallel/test-tls-connect-given-socket.js
- "invalid socket" when passing 'socket: socket' in tls.connect?
parallel/test-double-tls-server.js
- ALPNCallback
parallel/test-tls-writewrap-leak.js
- the write callback is supposed to get an error ECANCELED "Canceled because of SSL destruction"
parallel/test-tls-client-default-ciphers.js
parallel/test-tls-socket-constructor-alpn-options-parsing.js
sequential/test-tls-session-timeout.js
parallel/test-tls-env-extra-ca-with-options.js

# skipped (wontfix)

parallel/test-tls-no-sslv23.js
- skipped

# wontfix

test-tls-disable-renegotiation.js
- boringssl doesn't support client-initiated renegotiation

# passes already

parallel/test-tls-pause.js
parallel/test-tls-connect-memleak.js
- passes already

# Attempted

http.request errors because it passes port but no host and path as `localhost:${port}`. _http_client concatenates
that to `localhost:${port}localhost:${port}` which is an invalid url
- test-tls-over-http-tunnel.js
- the problem is that sending an http request with path `abcd` will do `GET abcd HTTP/1.1`, but
  fetch `url.com/abcd` is `GET /abcd HTTP/1.1`. skipping the slash is invalid anyway and node's http server doesn't
  accept it. but net does.
- http_client in bun is implemented with fetch which doesn't let you send a malformed http request
- this might be unintentional? unclear

[ES] test-tls-disable-renegotiation.js:
- missing ERR_INVALID_ARG_TYPE for client.renegotiate()
- OpenSSL function should not have been called via OPENSSL_internal SSL routines
- The error is emitted at: <https://github.com/google/boringssl/blob/035e720641f385e82c72b7b0a9e1d89e58cb5ed5/ssl/ssl_lib.cc#L1629>
- marked as 'caller-initiated renegotiation is not supported'. you can't renegotiate unless a renegotiation is already pending.

test-tls-secure-session.js
- client.on("session") never called?
- probably because it sets secureProtocol: 'TLSv1_2_method'
- we probably don't support setting secureProtocol
- we don't emit a session event at all ever except in http2. node emits a session at the end of onConnectSecure and in onnewesssionclient
- search terms: 'emit('session)'

# Skipped by electron

these tests are disabled by electron: (https://github.com/electron/electron/blob/main/script/node-disabled-tests.json)
  "parallel/test-tls-alpn-server-client",
  "parallel/test-tls-cli-min-version-1.0",
  "parallel/test-tls-cli-max-version-1.2",
  "parallel/test-tls-cli-max-version-1.3",
  "parallel/test-tls-cli-min-version-1.1",
  "parallel/test-tls-cli-min-version-1.2",
  "parallel/test-tls-cli-min-version-1.3",
  "parallel/test-tls-client-auth",
  "parallel/test-tls-client-getephemeralkeyinfo",
  "parallel/test-tls-client-mindhsize",
  "parallel/test-tls-client-reject",
  "parallel/test-tls-client-renegotiation-13",
  "parallel/test-tls-cnnic-whitelist",
  "parallel/test-tls-disable-renegotiation",
  "parallel/test-tls-empty-sni-context",
  "parallel/test-tls-error-stack",
  "parallel/test-tls-finished",
  "parallel/test-tls-generic-stream",
  "parallel/test-tls-getcipher",
  "parallel/test-tls-getprotocol",
  "parallel/test-tls-handshake-error",
  "parallel/test-tls-handshake-exception",
  "parallel/test-tls-hello-parser-failure",
  "parallel/test-tls-honorcipherorder",
  "parallel/test-tls-junk-closes-server",
  "parallel/test-tls-junk-server",
  "parallel/test-tls-key-mismatch",
  "parallel/test-tls-max-send-fragment",
  "parallel/test-tls-min-max-version",
  "parallel/test-tls-multi-key",
  "parallel/test-tls-multi-pfx",
  "parallel/test-tls-no-cert-required",
  "parallel/test-tls-options-boolean-check",
  "parallel/test-tls-passphrase",
  "parallel/test-tls-peer-certificate",
  "parallel/test-tls-pfx-authorizationerror",
  "parallel/test-tls-psk-circuit",
  "parallel/test-tls-reduced-SECLEVEL-in-cipher",
  "parallel/test-tls-root-certificates",
  "parallel/test-tls-server-failed-handshake-emits-clienterror",
  "parallel/test-tls-set-ciphers",
  "parallel/test-tls-set-ciphers-error",
  "parallel/test-tls-set-sigalgs",
  "parallel/test-tls-socket-allow-half-open-option",
  "parallel/test-tls-socket-failed-handshake-emits-error",
  "parallel/test-tls-ticket",
  "parallel/test-tls-ticket-cluster",